{"version":3,"sources":["../src/withLifecycle.ts"],"names":[],"mappings":";;;AAOO,SAAS,aAAA,CACZ,EAAA,EACA,KAAA,GAAwC,EAAC,EAC3C;AACE,EAAA,OAAO,UAAU,IAAA,KAEZ;AACD,IAAA,IAAI;AACA,MAAA,IAAI,MAAM,MAAA,EAAQ,MAAM,KAAA,CAAM,MAAA,CAAO,GAAG,IAAI,CAAA;AAE5C,MAAA,MAAM,MAAA,GAAS,MAAM,EAAA,CAAG,GAAG,IAAI,CAAA;AAE/B,MAAA,IAAI,KAAA,CAAM,KAAA,EAAO,MAAM,KAAA,CAAM,MAAM,MAAM,CAAA;AAEzC,MAAA,OAAO,EAAE,EAAA,EAAI,IAAA,EAAM,MAAA,EAAO;AAAA,IAC9B,SAAS,KAAA,EAAO;AACZ,MAAA,IAAI,KAAA,CAAM,OAAA,EAAS,MAAM,KAAA,CAAM,QAAQ,KAAK,CAAA;AAC5C,MAAA,OAAO,EAAE,EAAA,EAAI,KAAA,EAAO,KAAA,EAAM;AAAA,IAC9B,CAAA,SAAE;AACE,MAAA,IAAI,KAAA,CAAM,OAAA,EAAS,MAAM,KAAA,CAAM,OAAA,EAAQ;AAAA,IAC3C;AAAA,EACJ,CAAA;AACJ","file":"index.cjs","sourcesContent":["export type LifecycleHooks<TArgs extends any[], TResult> = {\n    before?: (...args: TArgs) => void | Promise<void>;\n    after?: (result: TResult) => void | Promise<void>;\n    onError?: (error: any) => void | Promise<void>;\n    finally?: () => void | Promise<void>;\n};\n\nexport function withLifecycle<TArgs extends any[], TResult>(\n    fn: (...args: TArgs) => Promise<TResult> | TResult,\n    hooks: LifecycleHooks<TArgs, TResult> = {}\n) {\n    return async (...args: TArgs): Promise<\n        { ok: true; result: TResult } | { ok: false; error: any }\n    > => {\n        try {\n            if (hooks.before) await hooks.before(...args);\n\n            const result = await fn(...args);\n\n            if (hooks.after) await hooks.after(result);\n\n            return { ok: true, result };\n        } catch (error) {\n            if (hooks.onError) await hooks.onError(error);\n            return { ok: false, error };\n        } finally {\n            if (hooks.finally) await hooks.finally();\n        }\n    };\n}\n"]}